
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Prashant
 */
public class AppliancesInfo extends javax.swing.JFrame {

    /**
     * Creates new form AppliancesInfo
     */
    private final ArrayList<TableData> bookList = new ArrayList<>(); //initializing ArrayList of type TableData
    private String bookCategory = "Literature and Fiction";
    private String coverType = "Paperback";
    private boolean searchFlag = false;
    private boolean bookAddingFlag = false;
    private int searchIndex = 0;

    public AppliancesInfo() {
        initComponents();
        addFrameIcon();//calling method to add icon to the JFrame
        
        addingProductPanel.setVisible(false);//Initially hiding the panel of adding book details

        //Setting the width of the JTable as required
        appliancesInfo.getColumnModel().getColumn(0).setPreferredWidth(100);
        appliancesInfo.getColumnModel().getColumn(1).setPreferredWidth(80);
        appliancesInfo.getColumnModel().getColumn(2).setPreferredWidth(70);
        appliancesInfo.getColumnModel().getColumn(3).setPreferredWidth(1);
        appliancesInfo.getColumnModel().getColumn(4).setPreferredWidth(70);
        appliancesInfo.getColumnModel().getColumn(5).setPreferredWidth(1);
        appliancesInfo.getColumnModel().getColumn(6).setPreferredWidth(5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpCoverType = new javax.swing.ButtonGroup();
        sidePane = new javax.swing.JPanel();
        btnHomePane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnAddProductPane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        headingPane = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        homePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        appliancesInfo = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        btnSearchByPrice = new javax.swing.JButton();
        cmbSearchCategory = new javax.swing.JComboBox<>();
        btnSearchByCategory = new javax.swing.JButton();
        addingProductPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bookPriceField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rbPaperback = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        bookRating = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbBookCategory = new javax.swing.JComboBox<>();
        bookNameField = new javax.swing.JTextField();
        rbHardcoverCaseWrap = new javax.swing.JRadioButton();
        bookISBNField = new javax.swing.JTextField();
        rbHardcoverDustJacket = new javax.swing.JRadioButton();
        bookDiscountField = new javax.swing.JTextField();
        btnAddProduct = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuOpenFile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuImportFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuUserGuide = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bibliopole");
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(275, 150, 0, 0));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        sidePane.setBackground(new java.awt.Color(0, 0, 0));

        btnHomePane.setBackground(new java.awt.Color(0, 0, 0));
        btnHomePane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHomePaneMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnHomePaneMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnHomePaneMouseExited(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(141, 133, 133));
        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-home-48.png"))); // NOI18N
        jLabel2.setText("  Home");

        javax.swing.GroupLayout btnHomePaneLayout = new javax.swing.GroupLayout(btnHomePane);
        btnHomePane.setLayout(btnHomePaneLayout);
        btnHomePaneLayout.setHorizontalGroup(
            btnHomePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnHomePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        btnHomePaneLayout.setVerticalGroup(
            btnHomePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnHomePaneLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        btnAddProductPane.setBackground(new java.awt.Color(0, 0, 0));
        btnAddProductPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddProductPaneMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddProductPaneMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddProductPaneMouseExited(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(17, 171, 171));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-add-property-48.png"))); // NOI18N
        jLabel1.setText("Add Product");

        javax.swing.GroupLayout btnAddProductPaneLayout = new javax.swing.GroupLayout(btnAddProductPane);
        btnAddProductPane.setLayout(btnAddProductPaneLayout);
        btnAddProductPaneLayout.setHorizontalGroup(
            btnAddProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnAddProductPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        btnAddProductPaneLayout.setVerticalGroup(
            btnAddProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnAddProductPaneLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout sidePaneLayout = new javax.swing.GroupLayout(sidePane);
        sidePane.setLayout(sidePaneLayout);
        sidePaneLayout.setHorizontalGroup(
            sidePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAddProductPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnHomePane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidePaneLayout.setVerticalGroup(
            sidePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePaneLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(btnHomePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnAddProductPane, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        headingPane.setBackground(new java.awt.Color(51, 0, 255));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Logo.png"))); // NOI18N

        javax.swing.GroupLayout headingPaneLayout = new javax.swing.GroupLayout(headingPane);
        headingPane.setLayout(headingPaneLayout);
        headingPaneLayout.setHorizontalGroup(
            headingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        headingPaneLayout.setVerticalGroup(
            headingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLayeredPane1.setBackground(new java.awt.Color(9, 94, 94));

        homePanel.setBackground(new java.awt.Color(55, 71, 79));

        appliancesInfo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        appliancesInfo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        appliancesInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "ISBN", "Category", "Rating", "Cover Type", "Price ($)", "Discount (%)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appliancesInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        appliancesInfo.setRowHeight(19);
        appliancesInfo.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(appliancesInfo);

        searchField.setBackground(new java.awt.Color(55, 71, 79));
        searchField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        searchField.setForeground(new java.awt.Color(255, 255, 255));
        searchField.setText("Search...");
        searchField.setToolTipText("");
        searchField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        searchField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchFieldMouseClicked(evt);
            }
        });

        btnSearchByPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-search-24.png"))); // NOI18N
        btnSearchByPrice.setText("Search by Price");
        btnSearchByPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByPriceActionPerformed(evt);
            }
        });

        cmbSearchCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Literature and Fiction", "Mythology and Religion", "Art and Design", "Memoir and Biography", "General Non-Fiction", "Poetry and Plays", "Bussiness and Finance", "Motivation" }));

        btnSearchByCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-search-24.png"))); // NOI18N
        btnSearchByCategory.setText("Search by Category");
        btnSearchByCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchByPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmbSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearchByCategory)
                .addContainerGap())
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByPrice)
                    .addComponent(cmbSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        addingProductPanel.setBackground(new java.awt.Color(55, 71, 79));

        jPanel2.setBackground(new java.awt.Color(55, 71, 79));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 204, 204), new java.awt.Color(0, 153, 153), new java.awt.Color(0, 204, 204), new java.awt.Color(0, 153, 153)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Category:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Discount (%):");

        bookPriceField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        bookPriceField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bookPriceFieldKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Rating:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Name:");

        btnGrpCoverType.add(rbPaperback);
        rbPaperback.setForeground(new java.awt.Color(255, 255, 255));
        rbPaperback.setSelected(true);
        rbPaperback.setText("Paperback");
        rbPaperback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPaperbackActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Price ($):");

        bookRating.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ISBN:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Cover Type:");

        cmbBookCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Literature and Fiction", "Mythology and Religion", "Art and Design", "Memoir and Biography", "General Non-Fiction", "Poetry and Plays", "Bussiness and Finance", "Motivation" }));
        cmbBookCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBookCategoryActionPerformed(evt);
            }
        });

        bookNameField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        btnGrpCoverType.add(rbHardcoverCaseWrap);
        rbHardcoverCaseWrap.setForeground(new java.awt.Color(255, 255, 255));
        rbHardcoverCaseWrap.setText("Hardcover Case Wrap");
        rbHardcoverCaseWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHardcoverCaseWrapActionPerformed(evt);
            }
        });

        bookISBNField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        btnGrpCoverType.add(rbHardcoverDustJacket);
        rbHardcoverDustJacket.setForeground(new java.awt.Color(255, 255, 255));
        rbHardcoverDustJacket.setText("Hardcover Dust Jacket");
        rbHardcoverDustJacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHardcoverDustJacketActionPerformed(evt);
            }
        });

        bookDiscountField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        bookDiscountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bookDiscountFieldKeyTyped(evt);
            }
        });

        btnAddProduct.setText("Add Product");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(rbPaperback)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rbHardcoverCaseWrap))
                                    .addComponent(rbHardcoverDustJacket)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bookPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bookDiscountField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bookRating, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbBookCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bookISBNField)
                                    .addComponent(bookNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookISBNField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBookCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookRating, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbPaperback)
                            .addComponent(rbHardcoverCaseWrap))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbHardcoverDustJacket)))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookDiscountField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddProduct)
                    .addComponent(btnClear)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        javax.swing.GroupLayout addingProductPanelLayout = new javax.swing.GroupLayout(addingProductPanel);
        addingProductPanel.setLayout(addingProductPanelLayout);
        addingProductPanelLayout.setHorizontalGroup(
            addingProductPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingProductPanelLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(207, Short.MAX_VALUE))
        );
        addingProductPanelLayout.setVerticalGroup(
            addingProductPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addingProductPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLayeredPane1.setLayer(homePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(addingProductPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(addingProductPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(addingProductPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 446, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        menuOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpenFile.setText("Open File");
        menuOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpenFile);
        jMenu1.add(jSeparator2);

        menuImportFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuImportFile.setText("Import File");
        menuImportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportFileActionPerformed(evt);
            }
        });
        jMenu1.add(menuImportFile);
        jMenu1.add(jSeparator1);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        menuUserGuide.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        menuUserGuide.setText("User Guide");
        menuUserGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUserGuideActionPerformed(evt);
            }
        });
        jMenu2.add(menuUserGuide);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLayeredPane1))
            .addComponent(headingPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(headingPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sidePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbPaperbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPaperbackActionPerformed
        coverType = "Paperback";//change the value of global variable
    }//GEN-LAST:event_rbPaperbackActionPerformed

    private void rbHardcoverCaseWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHardcoverCaseWrapActionPerformed
        coverType = "Hardcover Case Wrap";
    }//GEN-LAST:event_rbHardcoverCaseWrapActionPerformed

    private void btnHomePaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomePaneMouseClicked
        //This method hides add product panel and displays home panel
        addingProductPanel.setVisible(false);
        homePanel.setVisible(true);
    }//GEN-LAST:event_btnHomePaneMouseClicked

    private void btnSearchByPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByPriceActionPerformed
        //This method search a product based on the given price
        try {
            String price = searchField.getText().trim();
            if (!price.isEmpty()) {
                Double finalPrice = Double.parseDouble(price);

                binarySearch(bookList, finalPrice);//calling binarySearch method for searching price in the ArrayList

                if (searchFlag != false) { 
                    //For storing the book details located at 'searchIndex' index of the ArrayList
                    String outputDetails = "The Available Book is: \nName: " + bookList.get(searchIndex).getName() + "\n" + bookList.get(searchIndex).getISBN()
                            + "\nCategory: " + bookList.get(searchIndex).getCategory() + "\nRating by Literary Critics: " + bookList.get(searchIndex).getRating() + "\nCover Type: "
                            + bookList.get(searchIndex).getCoverType() + "\nPrice: " + bookList.get(searchIndex).getPrice() + "$\nAvailable Discount: "
                            + bookList.get(searchIndex).getDiscount() + "%";

                    JOptionPane.showMessageDialog(rootPane, outputDetails, "Execution", 1);
                    searchFlag = false;
                    searchIndex = 0;
                } else{
                    JOptionPane.showMessageDialog(rootPane, "No Books Available for Given Price !", "ERROR-404", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please! Provide Relevant Price in the Text Field !", "ERROR-404", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Please! Provide Numeric value for the Book Price !", "ERROR-404", JOptionPane.ERROR_MESSAGE);
        } catch (StackOverflowError | IndexOutOfBoundsException soe) {
        }
    }//GEN-LAST:event_btnSearchByPriceActionPerformed

    private void binarySearch(ArrayList<TableData> list, double price) {
        search(list, price, 0, list.size() - 1);
    }

    private boolean search(ArrayList<TableData> list, double price, int start, int end) {
        //This method searches for the provided price in the list
        if (start > end) {
            return searchFlag = false;
        }

        int middle = (int) Math.floor((end + start) / 2);
        if (list.get(middle).getPrice() == price) { //comparing the middle indexed value of list to the price
            searchIndex = middle;
            return searchFlag = true;
        } else if (price < list.get(middle).getPrice()) {
            return search(list, price, start, middle - 1);
        } else {
            return search(list, price, middle + 1, end);
        }
    }

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        try {
            String name = bookNameField.getText().trim();
            String ISBN = bookISBNField.getText().trim();
            String price = bookPriceField.getText().trim();
            String discount = bookDiscountField.getText().trim();
            String rating = bookRating.getValue().toString();//conveting value of rating to string

            if (!name.isEmpty() && !ISBN.isEmpty() && !price.isEmpty() && !discount.isEmpty()) {//checking for the empty fields
                if (!rating.equals("0")) {
                    double finalPrice = (double) Double.parseDouble(price);//converting price to double
                    int finalDiscount = Integer.parseInt(discount);
                    if (finalPrice > 0 && finalPrice <= 1000000) {
                        if (finalDiscount <= 100) {  
                            if (Pattern.compile("^ISBN: 97[8-9][0-9]{10}$").matcher(ISBN).matches()) {//executes below processes only if pattern of input is matched to provided regular expression
                                //Traversing through each object of the ArrayList to check if ISBN number already exist
                                for (TableData data : bookList) { 
                                    if (ISBN.equals(data.getISBN())) {
                                        JOptionPane.showMessageDialog(rootPane, "The Given Book Already Exist !!", "ERROR-404", JOptionPane.ERROR_MESSAGE);
                                        return;
                                    }
                                }
                                addToTable(name, ISBN, bookCategory, rating, coverType, price, discount);//for adding data to the table
                                
                                if (bookAddingFlag == true) return; //end method when no empty rows are in the JTable
                                JOptionPane.showMessageDialog(rootPane, "Book Successfully Added.", "Execution", 1);

                                //Adding values to the arraylist
                                TableData data = new TableData(name, ISBN, bookCategory, rating, coverType, finalPrice, finalDiscount);
                                bookList.add(data);
                                
                                initializeToCSV();//calling method to add data to the CSV file

                                sort(bookList);//calling method to sort data inside ArrayList
                            } else {
                                String isbnFormat = "Please! Provide ISBN Number for a Book in the Following Format: \nISBN: 97(8/9)XXXXXXXXXX";
                                JOptionPane.showMessageDialog(rootPane, isbnFormat, "ERROR-404", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Please! Provide Appropriate Discount Rate!", "ERROR-404", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Please! Provide Appropriate Price Value to the Book !", "ERROR-404", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Please! Provide Rating for the Book !", "ERROR-404", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please! Check for the Empty Fields !", "ERROR-404", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Please! Provide Numeric Values for Price and Discount !", "ERROR-404", JOptionPane.ERROR_MESSAGE);
        } catch (IndexOutOfBoundsException ae) {}
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void addToTable(String name, String ISBN, String bookCategory, String rating, String coverType, String price, String discount) {
        //This method adds data to the JTable
        int rowCount = appliancesInfo.getRowCount();
        int nextRow = 0;
        boolean emptyFlag = false;
        String s;
        String[] bookDetails = {name, ISBN, bookCategory, rating, coverType, price, discount};

        //Checking for empty rows in the table
        do {
            s = (String) appliancesInfo.getValueAt(nextRow, 0); //getting the value of a row of JTable
            if (s != null && s.length() != 0) {
                nextRow++;
            } else {
                emptyFlag = true;
            }
        } while (nextRow < rowCount && !emptyFlag);

        //For inserting values inside the table
        if (nextRow < rowCount) {
            int columnCount = appliancesInfo.getColumnCount();

            //Traversing through each column for adding relevant values
            for (int i = 0; i < columnCount; i++) {
                appliancesInfo.setValueAt(bookDetails[i], nextRow, i);
            }
        } else {
            bookAddingFlag = true;
            JOptionPane.showMessageDialog(rootPane, "No More Empty Rows are Prsesented in the Table !", "WARNING", 2);
        }
    }

    private void sort(ArrayList<TableData> list) {
        mergeSort(list, 0, list.size() - 1);
    }

    private void mergeSort(ArrayList<TableData> list, int start, int end) {
        //This method breaks down the list to smaller logical lists and calls merge method
        if (start < end) {
            int middle = (int) Math.floor((start + end) / 2);
            mergeSort(list, start, middle);
            mergeSort(list, middle + 1, end);
            merge(list, start, middle, end);
        }
    }

    private void merge(ArrayList<TableData> list, int start, int middle, int end) {
        //This method merges the logical ArrayLists from stack frame
        int leftSize = middle - start + 1;
        int rightSize = end - middle;

        //Creating temporary arraylist for storing data temporarily
        ArrayList<TableData> left = new ArrayList<>();
        ArrayList<TableData> right = new ArrayList<>();

        //For copying the data to the temporary ArrayLists
        for (int i = 0; i < leftSize; i++) {
            left.add(list.get(start + i));
        }
        for (int j = 0; j < rightSize; j++) {
            right.add(list.get(middle + 1 + j));
        }

        //Replacing the objects in the original ArrayList by comparing between the price of two temporary ArrayLists
        int i = 0, j = 0;
        for (int p = start; p <= end; p++) {
            if ((j >= rightSize) || (i < leftSize && left.get(i).getPrice() <= right.get(j).getPrice())) { //comparing the price from two temporary ArrayList
                list.set(p, left.get(i));
                i++;
            } else {
                list.set(p, right.get(j));
                j++;
            }
        }
    }

    private void bookPriceFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookPriceFieldKeyTyped
        //This method prohibits users from typing below charater in the text field
        char key = evt.getKeyChar();
        if (key == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_bookPriceFieldKeyTyped

    private void bookDiscountFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookDiscountFieldKeyTyped
        //This method prohibits users from typing below charater in the text field
        char key = evt.getKeyChar();
        if (key == '-' || key == '.') {
            evt.consume();
        }
    }//GEN-LAST:event_bookDiscountFieldKeyTyped

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        //This method provides Yes/No option in dialog box to close the program 
        int close = JOptionPane.showConfirmDialog(rootPane, "Do You Want to Close the Program?", "OPTION", JOptionPane.YES_NO_OPTION);
        if(close == 0){
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAddProductPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddProductPaneMouseClicked
        //This method displays add product panel by hiding home panel
        homePanel.setVisible(false);
        addingProductPanel.setVisible(true);
    }//GEN-LAST:event_btnAddProductPaneMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //This method clears all the text fields and assign default values for other components
        bookNameField.setText(null);
        bookISBNField.setText(null);
        bookPriceField.setText(null);
        bookDiscountField.setText(null);
        rbPaperback.setSelected(true);
        cmbBookCategory.setSelectedIndex(0);
        bookRating.setValue(0);
        bookCategory = "Literature and Fiction";
        coverType = "Paperback";
    }//GEN-LAST:event_btnClearActionPerformed

    private void rbHardcoverDustJacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHardcoverDustJacketActionPerformed
        coverType = "Hardcover Dust Jacket";
    }//GEN-LAST:event_rbHardcoverDustJacketActionPerformed

    private void cmbBookCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBookCategoryActionPerformed
        //This method changes the value of global variable as per the index selected in the combo box
        switch (cmbBookCategory.getSelectedIndex()) {
            case 0:
                bookCategory = "Literature and Fiction";
                break;
            case 1:
                bookCategory = "Mythology and Religion";
                break;
            case 2:
                bookCategory = "Art and Design";
                break;
            case 3:
                bookCategory = "Memoir and Biography";
                break;
            case 4:
                bookCategory = "General Non-Fiction";
                break;
            case 5:
                bookCategory = "Poetry and Plays";
                break;
            case 6:
                bookCategory = "Business and Finance";
                break;
            case 7:
                bookCategory = "Motivation";
                break;
        }
    }//GEN-LAST:event_cmbBookCategoryActionPerformed

    private void btnSearchByCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByCategoryActionPerformed
        //This method displays the name of books in selected category
        try {
            int numberInCategory = 0;
            ArrayList<TableData> sameCatBook = new ArrayList<>();

            for (TableData td : bookList) {
                if (td.getCategory().equals(cmbSearchCategory.getSelectedItem())) {
                    sameCatBook.add(td);
                    numberInCategory += 1;
                }
            }

            if (numberInCategory != 0) {
                String[] booksInCategory = new String[numberInCategory];

                for (int i = 0; i < numberInCategory; i++) {
                    booksInCategory[i] = sameCatBook.get(i).getName();
                }

                if (numberInCategory == 1) {
                    String booksInSameCategory = "Currently a Single Book is Available in Selected Category as: \n" + booksInCategory[0];
                    JOptionPane.showMessageDialog(rootPane, booksInSameCategory, "Execution", 1);
                } else {
                    String booksInSameCategory = "Currently " + numberInCategory + " Books are Available in Selected Category as: \n"
                            + Arrays.toString(booksInCategory).replace("[", "").replace(",", "\n").replace("]", "");
                    JOptionPane.showMessageDialog(rootPane, booksInSameCategory, "Execution", 1);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Currently No Books are Available in Selected Category !", "ERROR-404", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IndexOutOfBoundsException ae) {
        }
    }//GEN-LAST:event_btnSearchByCategoryActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        //This method provides Yes/No option in dialog box to close the program 
        int close = JOptionPane.showConfirmDialog(rootPane, "Do You Want to Close the Program?", "OPTION", JOptionPane.YES_NO_OPTION);
        if(close == 0){
            System.exit(0);
        }
    }//GEN-LAST:event_menuExitActionPerformed

    private void btnAddProductPaneMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddProductPaneMouseEntered
        hoverColor(btnAddProductPane);
    }//GEN-LAST:event_btnAddProductPaneMouseEntered

    private void btnAddProductPaneMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddProductPaneMouseExited
        resetHoverColor(btnAddProductPane);
    }//GEN-LAST:event_btnAddProductPaneMouseExited

    private void btnHomePaneMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomePaneMouseEntered
        hoverColor(btnHomePane);
    }//GEN-LAST:event_btnHomePaneMouseEntered

    private void btnHomePaneMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomePaneMouseExited
        resetHoverColor(btnHomePane);
    }//GEN-LAST:event_btnHomePaneMouseExited

    private void menuImportFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportFileActionPerformed
        //This method insert the data from the CSV file to the JTable
        try {
            clearTable(); //clearing all the existing data from the table
            
            bookList.clear(); //clearing all the data from the arraylist to add new data from csv

            BufferedReader br = new BufferedReader(new FileReader("details.csv"));
            String row;

            while ((row = br.readLine()) != null) {
                String[] bookDetail = row.split(","); //splitting the row value based on comma and storing to an array
                double finalPrice = (double) Double.parseDouble(bookDetail[5]);
                int finalDiscount = Integer.parseInt(bookDetail[6]);
                
                //For checking repetation of ISBN number from CSV file
                for (TableData data : bookList) { 
                    if (bookDetail[1].equals(data.getISBN())) {
                        JOptionPane.showMessageDialog(rootPane, "Book Having Same ISBN Number Already Exist!", "ERROR-404", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                addToTable(bookDetail[0], bookDetail[1], bookDetail[2], bookDetail[3], bookDetail[4], bookDetail[5], bookDetail[6]);//adding data to JTable
                
                //adding data to the ArrayList of type TableData
                TableData data = new TableData(bookDetail[0], bookDetail[1], bookDetail[2], bookDetail[3], bookDetail[4], finalPrice, finalDiscount);
                bookList.add(data);
            }
            sort(bookList); //sorting the ArrayList
            JOptionPane.showMessageDialog(rootPane, "File Imported Successfully.", "Execution", 1);
        } catch (FileNotFoundException fe) {JOptionPane.showMessageDialog(rootPane, "File Not Found.", "ERROR", JOptionPane.WARNING_MESSAGE);
        } catch (NumberFormatException nfe) {JOptionPane.showMessageDialog(rootPane, "Please! Check the Values of Price and Discount from CSV file.", "ERROR", JOptionPane.ERROR_MESSAGE);}
        catch (IOException ioe) {
        }
    }//GEN-LAST:event_menuImportFileActionPerformed
    
    private void clearTable() {
        //This method clears all the value of JTable
        int rowCount = appliancesInfo.getRowCount();
        int columnCount = appliancesInfo.getColumnCount();
        
        //Traversing through every row of jtable and setting the column value to null
        for (int j=0; j<rowCount; j++) {
            for (int i=0; i<columnCount; i++) {
                appliancesInfo.setValueAt(null, j, i);
            }
        }
    }

    private void searchFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchFieldMouseClicked
        searchField.setText(null);
    }//GEN-LAST:event_searchFieldMouseClicked

    private void menuUserGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUserGuideActionPerformed
        //This method opens the pdf file located in the project folder
        try {
            File userManual = new File("UserGuide.pdf");
            
            if(Desktop.isDesktopSupported()){ //checking if the current  platform supports the file type
                Desktop.getDesktop().open(userManual);
            } else{
                JOptionPane.showMessageDialog(rootPane, "Unsupported Feature", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException ex) {
        } catch (NullPointerException ne) {JOptionPane.showMessageDialog(rootPane, "File not Found", "ERROR", JOptionPane.WARNING_MESSAGE);}
    }//GEN-LAST:event_menuUserGuideActionPerformed

    private void menuOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenFileActionPerformed
        //This method opens the excel file located in the project folder
        try {
            File csvFile = new File("BookDetails.xlsx");
            
            if(Desktop.isDesktopSupported()){ //checking if the current  platform supports the file type
                Desktop.getDesktop().open(csvFile);
            } else{
                JOptionPane.showMessageDialog(rootPane, "Unsupported Feature", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException ex) {
        } catch (NullPointerException ne) {JOptionPane.showMessageDialog(rootPane, "File not Found", "ERROR", JOptionPane.WARNING_MESSAGE);}
    }//GEN-LAST:event_menuOpenFileActionPerformed

    private void hoverColor(JPanel panel) {
        panel.setBackground(new java.awt.Color(101, 101, 101));//setting the background color of the JPanel
    }

    private void resetHoverColor(JPanel panel) {
        panel.setBackground(new java.awt.Color(0, 0, 0));
    }

    private void initializeToCSV() {
        //This method writes the validated data to the CSV file
        try {
            File csv = new File("details.csv");
            if (!csv.isFile()) {
                csv.createNewFile(); //creating a CSV file if not found 
            }
            FileWriter fwr = new FileWriter(csv);
            //Below code gets the book details from ArrayList and write to the CSV file
            for (TableData td : bookList) {
                String[] bookDetail = {td.getName(), td.getISBN(), td.getCategory(), td.getRating(), td.getCoverType(),
                    String.valueOf(td.getPrice()), String.valueOf(td.getDiscount())};
                for (int i = 0; i < bookDetail.length; i++) {
                    fwr.append(bookDetail[i]); //writing value in the CSV file
                    if (i == bookDetail.length - 1) { //breaks loop after writing a line of data
                        break;
                    }
                    fwr.append(",");
                }
                fwr.append("\n");
            }
            fwr.flush(); //immediately save changes to the file
            fwr.close(); //closing the feature to write to the CSV file
        } catch (IOException ae) {
        }
    }
    
    private void addFrameIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons8-literature-64.png")));//adding icon to the JFrame
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AppliancesInfo().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addingProductPanel;
    private javax.swing.JTable appliancesInfo;
    private javax.swing.JTextField bookDiscountField;
    private javax.swing.JTextField bookISBNField;
    private javax.swing.JTextField bookNameField;
    private javax.swing.JTextField bookPriceField;
    private javax.swing.JSpinner bookRating;
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JPanel btnAddProductPane;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrpCoverType;
    private javax.swing.JPanel btnHomePane;
    private javax.swing.JButton btnSearchByCategory;
    private javax.swing.JButton btnSearchByPrice;
    private javax.swing.JComboBox<String> cmbBookCategory;
    private javax.swing.JComboBox<String> cmbSearchCategory;
    private javax.swing.JPanel headingPane;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuImportFile;
    private javax.swing.JMenuItem menuOpenFile;
    private javax.swing.JMenuItem menuUserGuide;
    private javax.swing.JRadioButton rbHardcoverCaseWrap;
    private javax.swing.JRadioButton rbHardcoverDustJacket;
    private javax.swing.JRadioButton rbPaperback;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel sidePane;
    // End of variables declaration//GEN-END:variables

}
